// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.6.1
// source: fib.proto

package fibproto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type NumReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	N int64 `protobuf:"varint,1,opt,name=n,proto3" json:"n,omitempty"`
}

func (x *NumReq) Reset() {
	*x = NumReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fib_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NumReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumReq) ProtoMessage() {}

func (x *NumReq) ProtoReflect() protoreflect.Message {
	mi := &file_fib_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumReq.ProtoReflect.Descriptor instead.
func (*NumReq) Descriptor() ([]byte, []int) {
	return file_fib_proto_rawDescGZIP(), []int{0}
}

func (x *NumReq) GetN() int64 {
	if x != nil {
		return x.N
	}
	return 0
}

type NumResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NFib int64 `protobuf:"varint,1,opt,name=nFib,proto3" json:"nFib,omitempty"`
}

func (x *NumResp) Reset() {
	*x = NumResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fib_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NumResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumResp) ProtoMessage() {}

func (x *NumResp) ProtoReflect() protoreflect.Message {
	mi := &file_fib_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumResp.ProtoReflect.Descriptor instead.
func (*NumResp) Descriptor() ([]byte, []int) {
	return file_fib_proto_rawDescGZIP(), []int{1}
}

func (x *NumResp) GetNFib() int64 {
	if x != nil {
		return x.NFib
	}
	return 0
}

type NumRespQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NSqr int64 `protobuf:"varint,1,opt,name=nSqr,proto3" json:"nSqr,omitempty"`
}

func (x *NumRespQ) Reset() {
	*x = NumRespQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fib_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NumRespQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumRespQ) ProtoMessage() {}

func (x *NumRespQ) ProtoReflect() protoreflect.Message {
	mi := &file_fib_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumRespQ.ProtoReflect.Descriptor instead.
func (*NumRespQ) Descriptor() ([]byte, []int) {
	return file_fib_proto_rawDescGZIP(), []int{2}
}

func (x *NumRespQ) GetNSqr() int64 {
	if x != nil {
		return x.NSqr
	}
	return 0
}

var File_fib_proto protoreflect.FileDescriptor

var file_fib_proto_rawDesc = []byte{
	0x0a, 0x09, 0x66, 0x69, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x16, 0x0a, 0x06, 0x4e,
	0x75, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x0c, 0x0a, 0x01, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x01, 0x6e, 0x22, 0x1d, 0x0a, 0x07, 0x4e, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x46, 0x69, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6e, 0x46,
	0x69, 0x62, 0x22, 0x1e, 0x0a, 0x08, 0x4e, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x51, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x53, 0x71, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6e, 0x53,
	0x71, 0x72, 0x32, 0x40, 0x0a, 0x09, 0x46, 0x69, 0x62, 0x6f, 0x6e, 0x61, 0x63, 0x63, 0x69, 0x12,
	0x18, 0x0a, 0x03, 0x46, 0x69, 0x62, 0x12, 0x07, 0x2e, 0x4e, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x1a,
	0x08, 0x2e, 0x4e, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x12, 0x19, 0x0a, 0x03, 0x53, 0x71, 0x72,
	0x12, 0x07, 0x2e, 0x4e, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e, 0x4e, 0x75, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x51, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x2f, 0x66, 0x69, 0x62, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fib_proto_rawDescOnce sync.Once
	file_fib_proto_rawDescData = file_fib_proto_rawDesc
)

func file_fib_proto_rawDescGZIP() []byte {
	file_fib_proto_rawDescOnce.Do(func() {
		file_fib_proto_rawDescData = protoimpl.X.CompressGZIP(file_fib_proto_rawDescData)
	})
	return file_fib_proto_rawDescData
}

var file_fib_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_fib_proto_goTypes = []interface{}{
	(*NumReq)(nil),   // 0: NumReq
	(*NumResp)(nil),  // 1: NumResp
	(*NumRespQ)(nil), // 2: NumRespQ
}
var file_fib_proto_depIdxs = []int32{
	0, // 0: Fibonacci.Fib:input_type -> NumReq
	0, // 1: Fibonacci.Sqr:input_type -> NumReq
	1, // 2: Fibonacci.Fib:output_type -> NumResp
	2, // 3: Fibonacci.Sqr:output_type -> NumRespQ
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_fib_proto_init() }
func file_fib_proto_init() {
	if File_fib_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_fib_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NumReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fib_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NumResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fib_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NumRespQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fib_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_fib_proto_goTypes,
		DependencyIndexes: file_fib_proto_depIdxs,
		MessageInfos:      file_fib_proto_msgTypes,
	}.Build()
	File_fib_proto = out.File
	file_fib_proto_rawDesc = nil
	file_fib_proto_goTypes = nil
	file_fib_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FibonacciClient is the client API for Fibonacci service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FibonacciClient interface {
	Fib(ctx context.Context, in *NumReq, opts ...grpc.CallOption) (*NumResp, error)
	Sqr(ctx context.Context, in *NumReq, opts ...grpc.CallOption) (*NumRespQ, error)
}

type fibonacciClient struct {
	cc grpc.ClientConnInterface
}

func NewFibonacciClient(cc grpc.ClientConnInterface) FibonacciClient {
	return &fibonacciClient{cc}
}

func (c *fibonacciClient) Fib(ctx context.Context, in *NumReq, opts ...grpc.CallOption) (*NumResp, error) {
	out := new(NumResp)
	err := c.cc.Invoke(ctx, "/Fibonacci/Fib", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fibonacciClient) Sqr(ctx context.Context, in *NumReq, opts ...grpc.CallOption) (*NumRespQ, error) {
	out := new(NumRespQ)
	err := c.cc.Invoke(ctx, "/Fibonacci/Sqr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FibonacciServer is the server API for Fibonacci service.
type FibonacciServer interface {
	Fib(context.Context, *NumReq) (*NumResp, error)
	Sqr(context.Context, *NumReq) (*NumRespQ, error)
}

// UnimplementedFibonacciServer can be embedded to have forward compatible implementations.
type UnimplementedFibonacciServer struct {
}

func (*UnimplementedFibonacciServer) Fib(context.Context, *NumReq) (*NumResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fib not implemented")
}
func (*UnimplementedFibonacciServer) Sqr(context.Context, *NumReq) (*NumRespQ, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sqr not implemented")
}

func RegisterFibonacciServer(s *grpc.Server, srv FibonacciServer) {
	s.RegisterService(&_Fibonacci_serviceDesc, srv)
}

func _Fibonacci_Fib_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FibonacciServer).Fib(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Fibonacci/Fib",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FibonacciServer).Fib(ctx, req.(*NumReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fibonacci_Sqr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FibonacciServer).Sqr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Fibonacci/Sqr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FibonacciServer).Sqr(ctx, req.(*NumReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Fibonacci_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Fibonacci",
	HandlerType: (*FibonacciServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Fib",
			Handler:    _Fibonacci_Fib_Handler,
		},
		{
			MethodName: "Sqr",
			Handler:    _Fibonacci_Sqr_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fib.proto",
}
